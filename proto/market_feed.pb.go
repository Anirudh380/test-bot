// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0--rc3
// source: market_feed.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_initial_feed Type = 0
	Type_live_feed    Type = 1
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "initial_feed",
		1: "live_feed",
	}
	Type_value = map[string]int32{
		"initial_feed": 0,
		"live_feed":    1,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_market_feed_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_market_feed_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{0}
}

type LTPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ltp float64 `protobuf:"fixed64,1,opt,name=ltp,proto3" json:"ltp,omitempty"`
	Ltt int64   `protobuf:"varint,2,opt,name=ltt,proto3" json:"ltt,omitempty"`
	Ltq int64   `protobuf:"varint,3,opt,name=ltq,proto3" json:"ltq,omitempty"`
	Cp  float64 `protobuf:"fixed64,4,opt,name=cp,proto3" json:"cp,omitempty"` //close price
}

func (x *LTPC) Reset() {
	*x = LTPC{}
	mi := &file_market_feed_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LTPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LTPC) ProtoMessage() {}

func (x *LTPC) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LTPC.ProtoReflect.Descriptor instead.
func (*LTPC) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{0}
}

func (x *LTPC) GetLtp() float64 {
	if x != nil {
		return x.Ltp
	}
	return 0
}

func (x *LTPC) GetLtt() int64 {
	if x != nil {
		return x.Ltt
	}
	return 0
}

func (x *LTPC) GetLtq() int64 {
	if x != nil {
		return x.Ltq
	}
	return 0
}

func (x *LTPC) GetCp() float64 {
	if x != nil {
		return x.Cp
	}
	return 0
}

type MarketLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidAskQuote []*Quote `protobuf:"bytes,1,rep,name=bidAskQuote,proto3" json:"bidAskQuote,omitempty"`
	Lut         int64    `protobuf:"varint,2,opt,name=lut,proto3" json:"lut,omitempty"`
}

func (x *MarketLevel) Reset() {
	*x = MarketLevel{}
	mi := &file_market_feed_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketLevel) ProtoMessage() {}

func (x *MarketLevel) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketLevel.ProtoReflect.Descriptor instead.
func (*MarketLevel) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{1}
}

func (x *MarketLevel) GetBidAskQuote() []*Quote {
	if x != nil {
		return x.BidAskQuote
	}
	return nil
}

func (x *MarketLevel) GetLut() int64 {
	if x != nil {
		return x.Lut
	}
	return 0
}

type MarketOHLC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ohlc []*OHLC `protobuf:"bytes,1,rep,name=ohlc,proto3" json:"ohlc,omitempty"`
}

func (x *MarketOHLC) Reset() {
	*x = MarketOHLC{}
	mi := &file_market_feed_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketOHLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketOHLC) ProtoMessage() {}

func (x *MarketOHLC) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketOHLC.ProtoReflect.Descriptor instead.
func (*MarketOHLC) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{2}
}

func (x *MarketOHLC) GetOhlc() []*OHLC {
	if x != nil {
		return x.Ohlc
	}
	return nil
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bq   int32   `protobuf:"varint,1,opt,name=bq,proto3" json:"bq,omitempty"`     //bid quantity
	Bp   float64 `protobuf:"fixed64,2,opt,name=bp,proto3" json:"bp,omitempty"`    //bid price
	Bno  int32   `protobuf:"varint,3,opt,name=bno,proto3" json:"bno,omitempty"`   //bid number of orders
	Aq   int32   `protobuf:"varint,4,opt,name=aq,proto3" json:"aq,omitempty"`     // ask quantity
	Ap   float64 `protobuf:"fixed64,5,opt,name=ap,proto3" json:"ap,omitempty"`    // ask price
	Ano  int32   `protobuf:"varint,6,opt,name=ano,proto3" json:"ano,omitempty"`   // ask number of orders
	BidQ int64   `protobuf:"varint,7,opt,name=bidQ,proto3" json:"bidQ,omitempty"` //bid quantity
	AskQ int64   `protobuf:"varint,8,opt,name=askQ,proto3" json:"askQ,omitempty"` // ask quantity
}

func (x *Quote) Reset() {
	*x = Quote{}
	mi := &file_market_feed_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{3}
}

func (x *Quote) GetBq() int32 {
	if x != nil {
		return x.Bq
	}
	return 0
}

func (x *Quote) GetBp() float64 {
	if x != nil {
		return x.Bp
	}
	return 0
}

func (x *Quote) GetBno() int32 {
	if x != nil {
		return x.Bno
	}
	return 0
}

func (x *Quote) GetAq() int32 {
	if x != nil {
		return x.Aq
	}
	return 0
}

func (x *Quote) GetAp() float64 {
	if x != nil {
		return x.Ap
	}
	return 0
}

func (x *Quote) GetAno() int32 {
	if x != nil {
		return x.Ano
	}
	return 0
}

func (x *Quote) GetBidQ() int64 {
	if x != nil {
		return x.BidQ
	}
	return 0
}

func (x *Quote) GetAskQ() int64 {
	if x != nil {
		return x.AskQ
	}
	return 0
}

type OptionGreeks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    float64 `protobuf:"fixed64,1,opt,name=op,proto3" json:"op,omitempty"` // option price
	Up    float64 `protobuf:"fixed64,2,opt,name=up,proto3" json:"up,omitempty"` //underlying price
	Iv    float64 `protobuf:"fixed64,3,opt,name=iv,proto3" json:"iv,omitempty"` // implied volatility
	Delta float64 `protobuf:"fixed64,4,opt,name=delta,proto3" json:"delta,omitempty"`
	Theta float64 `protobuf:"fixed64,5,opt,name=theta,proto3" json:"theta,omitempty"`
	Gamma float64 `protobuf:"fixed64,6,opt,name=gamma,proto3" json:"gamma,omitempty"`
	Vega  float64 `protobuf:"fixed64,7,opt,name=vega,proto3" json:"vega,omitempty"`
	Rho   float64 `protobuf:"fixed64,8,opt,name=rho,proto3" json:"rho,omitempty"`
}

func (x *OptionGreeks) Reset() {
	*x = OptionGreeks{}
	mi := &file_market_feed_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionGreeks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionGreeks) ProtoMessage() {}

func (x *OptionGreeks) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionGreeks.ProtoReflect.Descriptor instead.
func (*OptionGreeks) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{4}
}

func (x *OptionGreeks) GetOp() float64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *OptionGreeks) GetUp() float64 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *OptionGreeks) GetIv() float64 {
	if x != nil {
		return x.Iv
	}
	return 0
}

func (x *OptionGreeks) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *OptionGreeks) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *OptionGreeks) GetGamma() float64 {
	if x != nil {
		return x.Gamma
	}
	return 0
}

func (x *OptionGreeks) GetVega() float64 {
	if x != nil {
		return x.Vega
	}
	return 0
}

func (x *OptionGreeks) GetRho() float64 {
	if x != nil {
		return x.Rho
	}
	return 0
}

type ExtendedFeedDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atp       float64 `protobuf:"fixed64,1,opt,name=atp,proto3" json:"atp,omitempty"`           //avg traded price
	Cp        float64 `protobuf:"fixed64,2,opt,name=cp,proto3" json:"cp,omitempty"`             //close price
	Vtt       int64   `protobuf:"varint,3,opt,name=vtt,proto3" json:"vtt,omitempty"`            //volume traded today
	Oi        float64 `protobuf:"fixed64,4,opt,name=oi,proto3" json:"oi,omitempty"`             //open interest
	ChangeOi  float64 `protobuf:"fixed64,5,opt,name=changeOi,proto3" json:"changeOi,omitempty"` //change oi
	LastClose float64 `protobuf:"fixed64,6,opt,name=lastClose,proto3" json:"lastClose,omitempty"`
	Tbq       float64 `protobuf:"fixed64,7,opt,name=tbq,proto3" json:"tbq,omitempty"` //total buy quantity
	Tsq       float64 `protobuf:"fixed64,8,opt,name=tsq,proto3" json:"tsq,omitempty"` //total sell quantity
	Close     float64 `protobuf:"fixed64,9,opt,name=close,proto3" json:"close,omitempty"`
	Lc        float64 `protobuf:"fixed64,10,opt,name=lc,proto3" json:"lc,omitempty"`          //lower circuit
	Uc        float64 `protobuf:"fixed64,11,opt,name=uc,proto3" json:"uc,omitempty"`          //upper circuit
	Yh        float64 `protobuf:"fixed64,12,opt,name=yh,proto3" json:"yh,omitempty"`          //yearly high
	Yl        float64 `protobuf:"fixed64,13,opt,name=yl,proto3" json:"yl,omitempty"`          //yearly low
	Fp        float64 `protobuf:"fixed64,14,opt,name=fp,proto3" json:"fp,omitempty"`          //fill price
	Fv        int32   `protobuf:"varint,15,opt,name=fv,proto3" json:"fv,omitempty"`           //fill volume
	MbpBuy    int64   `protobuf:"varint,16,opt,name=mbpBuy,proto3" json:"mbpBuy,omitempty"`   //mbp buy
	MbpSell   int64   `protobuf:"varint,17,opt,name=mbpSell,proto3" json:"mbpSell,omitempty"` //mbp sell
	Tv        int64   `protobuf:"varint,18,opt,name=tv,proto3" json:"tv,omitempty"`           //traded volume
	Dhoi      float64 `protobuf:"fixed64,19,opt,name=dhoi,proto3" json:"dhoi,omitempty"`      //day high open interest
	Dloi      float64 `protobuf:"fixed64,20,opt,name=dloi,proto3" json:"dloi,omitempty"`      //day low open interest
	Sp        float64 `protobuf:"fixed64,21,opt,name=sp,proto3" json:"sp,omitempty"`          //spot price
	Poi       float64 `protobuf:"fixed64,22,opt,name=poi,proto3" json:"poi,omitempty"`        //previous open interest
}

func (x *ExtendedFeedDetails) Reset() {
	*x = ExtendedFeedDetails{}
	mi := &file_market_feed_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtendedFeedDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedFeedDetails) ProtoMessage() {}

func (x *ExtendedFeedDetails) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedFeedDetails.ProtoReflect.Descriptor instead.
func (*ExtendedFeedDetails) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{5}
}

func (x *ExtendedFeedDetails) GetAtp() float64 {
	if x != nil {
		return x.Atp
	}
	return 0
}

func (x *ExtendedFeedDetails) GetCp() float64 {
	if x != nil {
		return x.Cp
	}
	return 0
}

func (x *ExtendedFeedDetails) GetVtt() int64 {
	if x != nil {
		return x.Vtt
	}
	return 0
}

func (x *ExtendedFeedDetails) GetOi() float64 {
	if x != nil {
		return x.Oi
	}
	return 0
}

func (x *ExtendedFeedDetails) GetChangeOi() float64 {
	if x != nil {
		return x.ChangeOi
	}
	return 0
}

func (x *ExtendedFeedDetails) GetLastClose() float64 {
	if x != nil {
		return x.LastClose
	}
	return 0
}

func (x *ExtendedFeedDetails) GetTbq() float64 {
	if x != nil {
		return x.Tbq
	}
	return 0
}

func (x *ExtendedFeedDetails) GetTsq() float64 {
	if x != nil {
		return x.Tsq
	}
	return 0
}

func (x *ExtendedFeedDetails) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *ExtendedFeedDetails) GetLc() float64 {
	if x != nil {
		return x.Lc
	}
	return 0
}

func (x *ExtendedFeedDetails) GetUc() float64 {
	if x != nil {
		return x.Uc
	}
	return 0
}

func (x *ExtendedFeedDetails) GetYh() float64 {
	if x != nil {
		return x.Yh
	}
	return 0
}

func (x *ExtendedFeedDetails) GetYl() float64 {
	if x != nil {
		return x.Yl
	}
	return 0
}

func (x *ExtendedFeedDetails) GetFp() float64 {
	if x != nil {
		return x.Fp
	}
	return 0
}

func (x *ExtendedFeedDetails) GetFv() int32 {
	if x != nil {
		return x.Fv
	}
	return 0
}

func (x *ExtendedFeedDetails) GetMbpBuy() int64 {
	if x != nil {
		return x.MbpBuy
	}
	return 0
}

func (x *ExtendedFeedDetails) GetMbpSell() int64 {
	if x != nil {
		return x.MbpSell
	}
	return 0
}

func (x *ExtendedFeedDetails) GetTv() int64 {
	if x != nil {
		return x.Tv
	}
	return 0
}

func (x *ExtendedFeedDetails) GetDhoi() float64 {
	if x != nil {
		return x.Dhoi
	}
	return 0
}

func (x *ExtendedFeedDetails) GetDloi() float64 {
	if x != nil {
		return x.Dloi
	}
	return 0
}

func (x *ExtendedFeedDetails) GetSp() float64 {
	if x != nil {
		return x.Sp
	}
	return 0
}

func (x *ExtendedFeedDetails) GetPoi() float64 {
	if x != nil {
		return x.Poi
	}
	return 0
}

type OHLC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval string  `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Open     float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High     float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low      float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close    float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	Volume   int32   `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Ts       int64   `protobuf:"varint,7,opt,name=ts,proto3" json:"ts,omitempty"`
	Vol      int64   `protobuf:"varint,9,opt,name=vol,proto3" json:"vol,omitempty"`
}

func (x *OHLC) Reset() {
	*x = OHLC{}
	mi := &file_market_feed_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OHLC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OHLC) ProtoMessage() {}

func (x *OHLC) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OHLC.ProtoReflect.Descriptor instead.
func (*OHLC) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{6}
}

func (x *OHLC) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *OHLC) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *OHLC) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *OHLC) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *OHLC) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *OHLC) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *OHLC) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *OHLC) GetVol() int64 {
	if x != nil {
		return x.Vol
	}
	return 0
}

type MarketFullFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ltpc         *LTPC                `protobuf:"bytes,1,opt,name=ltpc,proto3" json:"ltpc,omitempty"`
	MarketLevel  *MarketLevel         `protobuf:"bytes,2,opt,name=marketLevel,proto3" json:"marketLevel,omitempty"`
	OptionGreeks *OptionGreeks        `protobuf:"bytes,3,opt,name=optionGreeks,proto3" json:"optionGreeks,omitempty"`
	MarketOHLC   *MarketOHLC          `protobuf:"bytes,4,opt,name=marketOHLC,proto3" json:"marketOHLC,omitempty"`
	EFeedDetails *ExtendedFeedDetails `protobuf:"bytes,5,opt,name=eFeedDetails,proto3" json:"eFeedDetails,omitempty"`
}

func (x *MarketFullFeed) Reset() {
	*x = MarketFullFeed{}
	mi := &file_market_feed_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketFullFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketFullFeed) ProtoMessage() {}

func (x *MarketFullFeed) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketFullFeed.ProtoReflect.Descriptor instead.
func (*MarketFullFeed) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{7}
}

func (x *MarketFullFeed) GetLtpc() *LTPC {
	if x != nil {
		return x.Ltpc
	}
	return nil
}

func (x *MarketFullFeed) GetMarketLevel() *MarketLevel {
	if x != nil {
		return x.MarketLevel
	}
	return nil
}

func (x *MarketFullFeed) GetOptionGreeks() *OptionGreeks {
	if x != nil {
		return x.OptionGreeks
	}
	return nil
}

func (x *MarketFullFeed) GetMarketOHLC() *MarketOHLC {
	if x != nil {
		return x.MarketOHLC
	}
	return nil
}

func (x *MarketFullFeed) GetEFeedDetails() *ExtendedFeedDetails {
	if x != nil {
		return x.EFeedDetails
	}
	return nil
}

type IndexFullFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ltpc       *LTPC       `protobuf:"bytes,1,opt,name=ltpc,proto3" json:"ltpc,omitempty"`
	MarketOHLC *MarketOHLC `protobuf:"bytes,2,opt,name=marketOHLC,proto3" json:"marketOHLC,omitempty"`
	LastClose  float64     `protobuf:"fixed64,3,opt,name=lastClose,proto3" json:"lastClose,omitempty"`
	Yh         float64     `protobuf:"fixed64,4,opt,name=yh,proto3" json:"yh,omitempty"` //yearly high
	Yl         float64     `protobuf:"fixed64,5,opt,name=yl,proto3" json:"yl,omitempty"` //yearly low
}

func (x *IndexFullFeed) Reset() {
	*x = IndexFullFeed{}
	mi := &file_market_feed_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexFullFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexFullFeed) ProtoMessage() {}

func (x *IndexFullFeed) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexFullFeed.ProtoReflect.Descriptor instead.
func (*IndexFullFeed) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{8}
}

func (x *IndexFullFeed) GetLtpc() *LTPC {
	if x != nil {
		return x.Ltpc
	}
	return nil
}

func (x *IndexFullFeed) GetMarketOHLC() *MarketOHLC {
	if x != nil {
		return x.MarketOHLC
	}
	return nil
}

func (x *IndexFullFeed) GetLastClose() float64 {
	if x != nil {
		return x.LastClose
	}
	return 0
}

func (x *IndexFullFeed) GetYh() float64 {
	if x != nil {
		return x.Yh
	}
	return 0
}

func (x *IndexFullFeed) GetYl() float64 {
	if x != nil {
		return x.Yl
	}
	return 0
}

type FullFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FullFeedUnion:
	//
	//	*FullFeed_MarketFF
	//	*FullFeed_IndexFF
	FullFeedUnion isFullFeed_FullFeedUnion `protobuf_oneof:"FullFeedUnion"`
}

func (x *FullFeed) Reset() {
	*x = FullFeed{}
	mi := &file_market_feed_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullFeed) ProtoMessage() {}

func (x *FullFeed) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullFeed.ProtoReflect.Descriptor instead.
func (*FullFeed) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{9}
}

func (m *FullFeed) GetFullFeedUnion() isFullFeed_FullFeedUnion {
	if m != nil {
		return m.FullFeedUnion
	}
	return nil
}

func (x *FullFeed) GetMarketFF() *MarketFullFeed {
	if x, ok := x.GetFullFeedUnion().(*FullFeed_MarketFF); ok {
		return x.MarketFF
	}
	return nil
}

func (x *FullFeed) GetIndexFF() *IndexFullFeed {
	if x, ok := x.GetFullFeedUnion().(*FullFeed_IndexFF); ok {
		return x.IndexFF
	}
	return nil
}

type isFullFeed_FullFeedUnion interface {
	isFullFeed_FullFeedUnion()
}

type FullFeed_MarketFF struct {
	MarketFF *MarketFullFeed `protobuf:"bytes,1,opt,name=marketFF,proto3,oneof"`
}

type FullFeed_IndexFF struct {
	IndexFF *IndexFullFeed `protobuf:"bytes,2,opt,name=indexFF,proto3,oneof"`
}

func (*FullFeed_MarketFF) isFullFeed_FullFeedUnion() {}

func (*FullFeed_IndexFF) isFullFeed_FullFeedUnion() {}

type OptionChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ltpc         *LTPC                `protobuf:"bytes,1,opt,name=ltpc,proto3" json:"ltpc,omitempty"`
	BidAskQuote  *Quote               `protobuf:"bytes,2,opt,name=bidAskQuote,proto3" json:"bidAskQuote,omitempty"`
	OptionGreeks *OptionGreeks        `protobuf:"bytes,3,opt,name=optionGreeks,proto3" json:"optionGreeks,omitempty"`
	EFeedDetails *ExtendedFeedDetails `protobuf:"bytes,4,opt,name=eFeedDetails,proto3" json:"eFeedDetails,omitempty"`
}

func (x *OptionChain) Reset() {
	*x = OptionChain{}
	mi := &file_market_feed_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionChain) ProtoMessage() {}

func (x *OptionChain) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionChain.ProtoReflect.Descriptor instead.
func (*OptionChain) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{10}
}

func (x *OptionChain) GetLtpc() *LTPC {
	if x != nil {
		return x.Ltpc
	}
	return nil
}

func (x *OptionChain) GetBidAskQuote() *Quote {
	if x != nil {
		return x.BidAskQuote
	}
	return nil
}

func (x *OptionChain) GetOptionGreeks() *OptionGreeks {
	if x != nil {
		return x.OptionGreeks
	}
	return nil
}

func (x *OptionChain) GetEFeedDetails() *ExtendedFeedDetails {
	if x != nil {
		return x.EFeedDetails
	}
	return nil
}

type Feed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FeedUnion:
	//
	//	*Feed_Ltpc
	//	*Feed_Ff
	//	*Feed_Oc
	FeedUnion isFeed_FeedUnion `protobuf_oneof:"FeedUnion"`
}

func (x *Feed) Reset() {
	*x = Feed{}
	mi := &file_market_feed_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feed) ProtoMessage() {}

func (x *Feed) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feed.ProtoReflect.Descriptor instead.
func (*Feed) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{11}
}

func (m *Feed) GetFeedUnion() isFeed_FeedUnion {
	if m != nil {
		return m.FeedUnion
	}
	return nil
}

func (x *Feed) GetLtpc() *LTPC {
	if x, ok := x.GetFeedUnion().(*Feed_Ltpc); ok {
		return x.Ltpc
	}
	return nil
}

func (x *Feed) GetFf() *FullFeed {
	if x, ok := x.GetFeedUnion().(*Feed_Ff); ok {
		return x.Ff
	}
	return nil
}

func (x *Feed) GetOc() *OptionChain {
	if x, ok := x.GetFeedUnion().(*Feed_Oc); ok {
		return x.Oc
	}
	return nil
}

type isFeed_FeedUnion interface {
	isFeed_FeedUnion()
}

type Feed_Ltpc struct {
	Ltpc *LTPC `protobuf:"bytes,1,opt,name=ltpc,proto3,oneof"`
}

type Feed_Ff struct {
	Ff *FullFeed `protobuf:"bytes,2,opt,name=ff,proto3,oneof"`
}

type Feed_Oc struct {
	Oc *OptionChain `protobuf:"bytes,3,opt,name=oc,proto3,oneof"`
}

func (*Feed_Ltpc) isFeed_FeedUnion() {}

func (*Feed_Ff) isFeed_FeedUnion() {}

func (*Feed_Oc) isFeed_FeedUnion() {}

type FeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Type             `protobuf:"varint,1,opt,name=type,proto3,enum=com.upstox.marketdatafeeder.rpc.proto.Type" json:"type,omitempty"`
	Feeds     map[string]*Feed `protobuf:"bytes,2,rep,name=feeds,proto3" json:"feeds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurrentTs int64            `protobuf:"varint,3,opt,name=currentTs,proto3" json:"currentTs,omitempty"`
}

func (x *FeedResponse) Reset() {
	*x = FeedResponse{}
	mi := &file_market_feed_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedResponse) ProtoMessage() {}

func (x *FeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_feed_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedResponse.ProtoReflect.Descriptor instead.
func (*FeedResponse) Descriptor() ([]byte, []int) {
	return file_market_feed_proto_rawDescGZIP(), []int{12}
}

func (x *FeedResponse) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_initial_feed
}

func (x *FeedResponse) GetFeeds() map[string]*Feed {
	if x != nil {
		return x.Feeds
	}
	return nil
}

func (x *FeedResponse) GetCurrentTs() int64 {
	if x != nil {
		return x.CurrentTs
	}
	return 0
}

var File_market_feed_proto protoreflect.FileDescriptor

var file_market_feed_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x04, 0x4c, 0x54,
	0x50, 0x43, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6c, 0x74, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x74, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x63, 0x70, 0x22, 0x6f, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x41, 0x73,
	0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x41,
	0x73, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x75, 0x74, 0x22, 0x4d, 0x0a, 0x0a, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4f, 0x48, 0x4c, 0x43, 0x12, 0x3f, 0x0a, 0x04, 0x6f, 0x68, 0x6c, 0x63, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74,
	0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x48,
	0x4c, 0x43, 0x52, 0x04, 0x6f, 0x68, 0x6c, 0x63, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x62, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x62, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x62, 0x6e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x61, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x51, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x69, 0x64, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73,
	0x6b, 0x51, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x51, 0x22, 0xa6,
	0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x69, 0x76, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x61, 0x6d, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x6d,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x67, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x76, 0x65, 0x67, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x68, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x72, 0x68, 0x6f, 0x22, 0xb9, 0x03, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x74,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x63,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x76, 0x74, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x6f, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x69, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x62, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x62, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x73, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x73,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x63, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x75, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x66, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x76, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x62, 0x70, 0x42, 0x75,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x62, 0x70, 0x42, 0x75, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x62, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6d, 0x62, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x76, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x68, 0x6f,
	0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x68, 0x6f, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6c, 0x6f, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x6c, 0x6f,
	0x69, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x69, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x70, 0x6f, 0x69, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x4f, 0x48, 0x4c, 0x43, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76,
	0x6f, 0x6c, 0x22, 0xb3, 0x03, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x75, 0x6c,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x74, 0x70, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65,
	0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x54, 0x50, 0x43,
	0x52, 0x04, 0x6c, 0x74, 0x70, 0x63, 0x12, 0x54, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x0c,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f,
	0x48, 0x4c, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x48, 0x4c, 0x43, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4f, 0x48, 0x4c, 0x43, 0x12, 0x5e, 0x0a, 0x0c, 0x65, 0x46, 0x65, 0x65,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46,
	0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65, 0x46, 0x65, 0x65,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x74,
	0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75,
	0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x54, 0x50, 0x43, 0x52, 0x04, 0x6c, 0x74, 0x70, 0x63, 0x12, 0x51, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x48, 0x4c, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x48,
	0x4c, 0x43, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x48, 0x4c, 0x43, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x79, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x79, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x79, 0x6c, 0x22, 0xc2, 0x01, 0x0a,
	0x08, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x46, 0x46, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x65,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x46, 0x12, 0x50,
	0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x75, 0x6c,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x46,
	0x42, 0x0f, 0x0a, 0x0d, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x6f,
	0x6e, 0x22, 0xd7, 0x02, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x74, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x54, 0x50, 0x43, 0x52, 0x04, 0x6c, 0x74,
	0x70, 0x63, 0x12, 0x4e, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70,
	0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x65, 0x65,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75,
	0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x0c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x04,
	0x46, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x6c, 0x74, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x54, 0x50, 0x43, 0x48,
	0x00, 0x52, 0x04, 0x6c, 0x74, 0x70, 0x63, 0x12, 0x41, 0x0a, 0x02, 0x66, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65,
	0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x46, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x02, 0x66, 0x66, 0x12, 0x44, 0x0a, 0x02, 0x6f, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73,
	0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65,
	0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x63,
	0x42, 0x0b, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02,
	0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x05, 0x66, 0x65, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x66, 0x65, 0x65, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x73, 0x1a, 0x65, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x75, 0x70, 0x73, 0x74, 0x6f, 0x78, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x27, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x10, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x41, 0x6e, 0x69, 0x72, 0x75, 0x64, 0x68, 0x33, 0x38, 0x30, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2d, 0x62, 0x6f, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x66, 0x65, 0x65, 0x64,
	0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x66, 0x65, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_market_feed_proto_rawDescOnce sync.Once
	file_market_feed_proto_rawDescData = file_market_feed_proto_rawDesc
)

func file_market_feed_proto_rawDescGZIP() []byte {
	file_market_feed_proto_rawDescOnce.Do(func() {
		file_market_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_feed_proto_rawDescData)
	})
	return file_market_feed_proto_rawDescData
}

var file_market_feed_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_market_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_market_feed_proto_goTypes = []any{
	(Type)(0),                   // 0: com.upstox.marketdatafeeder.rpc.proto.Type
	(*LTPC)(nil),                // 1: com.upstox.marketdatafeeder.rpc.proto.LTPC
	(*MarketLevel)(nil),         // 2: com.upstox.marketdatafeeder.rpc.proto.MarketLevel
	(*MarketOHLC)(nil),          // 3: com.upstox.marketdatafeeder.rpc.proto.MarketOHLC
	(*Quote)(nil),               // 4: com.upstox.marketdatafeeder.rpc.proto.Quote
	(*OptionGreeks)(nil),        // 5: com.upstox.marketdatafeeder.rpc.proto.OptionGreeks
	(*ExtendedFeedDetails)(nil), // 6: com.upstox.marketdatafeeder.rpc.proto.ExtendedFeedDetails
	(*OHLC)(nil),                // 7: com.upstox.marketdatafeeder.rpc.proto.OHLC
	(*MarketFullFeed)(nil),      // 8: com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed
	(*IndexFullFeed)(nil),       // 9: com.upstox.marketdatafeeder.rpc.proto.IndexFullFeed
	(*FullFeed)(nil),            // 10: com.upstox.marketdatafeeder.rpc.proto.FullFeed
	(*OptionChain)(nil),         // 11: com.upstox.marketdatafeeder.rpc.proto.OptionChain
	(*Feed)(nil),                // 12: com.upstox.marketdatafeeder.rpc.proto.Feed
	(*FeedResponse)(nil),        // 13: com.upstox.marketdatafeeder.rpc.proto.FeedResponse
	nil,                         // 14: com.upstox.marketdatafeeder.rpc.proto.FeedResponse.FeedsEntry
}
var file_market_feed_proto_depIdxs = []int32{
	4,  // 0: com.upstox.marketdatafeeder.rpc.proto.MarketLevel.bidAskQuote:type_name -> com.upstox.marketdatafeeder.rpc.proto.Quote
	7,  // 1: com.upstox.marketdatafeeder.rpc.proto.MarketOHLC.ohlc:type_name -> com.upstox.marketdatafeeder.rpc.proto.OHLC
	1,  // 2: com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed.ltpc:type_name -> com.upstox.marketdatafeeder.rpc.proto.LTPC
	2,  // 3: com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed.marketLevel:type_name -> com.upstox.marketdatafeeder.rpc.proto.MarketLevel
	5,  // 4: com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed.optionGreeks:type_name -> com.upstox.marketdatafeeder.rpc.proto.OptionGreeks
	3,  // 5: com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed.marketOHLC:type_name -> com.upstox.marketdatafeeder.rpc.proto.MarketOHLC
	6,  // 6: com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed.eFeedDetails:type_name -> com.upstox.marketdatafeeder.rpc.proto.ExtendedFeedDetails
	1,  // 7: com.upstox.marketdatafeeder.rpc.proto.IndexFullFeed.ltpc:type_name -> com.upstox.marketdatafeeder.rpc.proto.LTPC
	3,  // 8: com.upstox.marketdatafeeder.rpc.proto.IndexFullFeed.marketOHLC:type_name -> com.upstox.marketdatafeeder.rpc.proto.MarketOHLC
	8,  // 9: com.upstox.marketdatafeeder.rpc.proto.FullFeed.marketFF:type_name -> com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed
	9,  // 10: com.upstox.marketdatafeeder.rpc.proto.FullFeed.indexFF:type_name -> com.upstox.marketdatafeeder.rpc.proto.IndexFullFeed
	1,  // 11: com.upstox.marketdatafeeder.rpc.proto.OptionChain.ltpc:type_name -> com.upstox.marketdatafeeder.rpc.proto.LTPC
	4,  // 12: com.upstox.marketdatafeeder.rpc.proto.OptionChain.bidAskQuote:type_name -> com.upstox.marketdatafeeder.rpc.proto.Quote
	5,  // 13: com.upstox.marketdatafeeder.rpc.proto.OptionChain.optionGreeks:type_name -> com.upstox.marketdatafeeder.rpc.proto.OptionGreeks
	6,  // 14: com.upstox.marketdatafeeder.rpc.proto.OptionChain.eFeedDetails:type_name -> com.upstox.marketdatafeeder.rpc.proto.ExtendedFeedDetails
	1,  // 15: com.upstox.marketdatafeeder.rpc.proto.Feed.ltpc:type_name -> com.upstox.marketdatafeeder.rpc.proto.LTPC
	10, // 16: com.upstox.marketdatafeeder.rpc.proto.Feed.ff:type_name -> com.upstox.marketdatafeeder.rpc.proto.FullFeed
	11, // 17: com.upstox.marketdatafeeder.rpc.proto.Feed.oc:type_name -> com.upstox.marketdatafeeder.rpc.proto.OptionChain
	0,  // 18: com.upstox.marketdatafeeder.rpc.proto.FeedResponse.type:type_name -> com.upstox.marketdatafeeder.rpc.proto.Type
	14, // 19: com.upstox.marketdatafeeder.rpc.proto.FeedResponse.feeds:type_name -> com.upstox.marketdatafeeder.rpc.proto.FeedResponse.FeedsEntry
	12, // 20: com.upstox.marketdatafeeder.rpc.proto.FeedResponse.FeedsEntry.value:type_name -> com.upstox.marketdatafeeder.rpc.proto.Feed
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_market_feed_proto_init() }
func file_market_feed_proto_init() {
	if File_market_feed_proto != nil {
		return
	}
	file_market_feed_proto_msgTypes[9].OneofWrappers = []any{
		(*FullFeed_MarketFF)(nil),
		(*FullFeed_IndexFF)(nil),
	}
	file_market_feed_proto_msgTypes[11].OneofWrappers = []any{
		(*Feed_Ltpc)(nil),
		(*Feed_Ff)(nil),
		(*Feed_Oc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_feed_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_feed_proto_goTypes,
		DependencyIndexes: file_market_feed_proto_depIdxs,
		EnumInfos:         file_market_feed_proto_enumTypes,
		MessageInfos:      file_market_feed_proto_msgTypes,
	}.Build()
	File_market_feed_proto = out.File
	file_market_feed_proto_rawDesc = nil
	file_market_feed_proto_goTypes = nil
	file_market_feed_proto_depIdxs = nil
}
